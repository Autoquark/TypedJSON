{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/options-base.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/parser.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson/to-json.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","m","METADATA_FIELD_KEY","MISSING_REFLECT_CONF_MSG","isDirectlySerializableNativeType","type","Date","Number","String","Boolean","indexOf","isTypeTypedArray","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","parseToJSObject","json","expectedType","jsonStr","expectsTypesSerializedAsStrings","ArrayBuffer","DataView","hasQuotes","length","isInteger","test","trim","JSON","parse","isSubtypeOf","A","B","prototype","logError","message","console","error","optionalParams","log","logWarning","warn","isValueDefined","value","isInstanceOf","constructor","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","name","getJsonObjectName","ctor","metadata","JsonObjectMetadata","getFromConstructor","classType","hasOwnProperty","isExplicitlyMarked","doesHandleWithoutAnnotation","primitiveMeta","getKnownTypeNameFromType","dataMembers","Map","knownTypes","Set","isHandledWithoutAnnotation","injectMetadataInformation","propKey","objectMetadata","decoratorName","deserializer","parentMetadata","forEach","_metadata","_propKey","set","Object","defineProperty","enumerable","configurable","writable","add","keyType","elementType","elemCtor","keys","key","undefined","kAllOptions","extractOptionBase","from","options","filter","reduce","obj","getOptionValue","getDefaultOptionOf","mergeOptions","existing","moreSpecific","assign","defaultTypeEmitter","targetObject","sourceObject","expectedSourceType","sourceTypeMetadata","__type","setTypeHintEmitter","typeEmitterCallback","TypeError","_typeHintEmitter","setErrorHandler","errorHandlerCallback","_errorHandler","convertSingleValue","typeInfo","memberName","memberOptions","retrievePreserveNull","selfType","convertAsArrayBuffer","convertAsDataView","Array","convertAsArray","elementTypes","convertAsSet","convertAsMap","convertAsTypedArray","convertAsObject","expectedName","actualName","beforeSerializationMethodName","objMemberMetadata","serialized","objMemberOptions","serializer","expectedElementType","element","i","expectedTypeName","actualTypeName","typeInfoForElements","slice","map","elementTypeInfo","resultArray","resultElement","push","expectedKeyType","keyTypeInfo","preserveNull","resultKeyValuePairObj","keyDefined","valueDefined","buffer","charCode","fromCharCode","join","dataView","defaultTypeResolver","get","setNameResolver","nameResolverCallback","_nameResolver","setTypeResolver","typeResolverCallback","_typeResolver","sourceObjectTypeInfo","objectName","expectedSelfType","selfConstructor","sourceObjectMetadata","knownTypeConstructors","_mergeKnownTypes","_createKnownTypesMap","typeFromTypeHint","revivedValue","objMemberValue","objMemberDebugName","elementConstructor","keyConstructor","isRequired","initializerCallback","e","_instantiateType","onDeserializedMethodName","sourceKey","srcTypeNameForDebug","_makeTypeErrorMessage","_throwTypeMismatchError","_convertAsFloatArray","_convertAsUintArray","_stringToArrayBuffer","_stringToDataView","isArray","resultSet","valueTypeInfo","resultMap","arrayType","every","elem","isNaN","targetType","actualSourceType","actualType","result","knownTypeMaps","knowTypes","knownTypeMeta","str","buf","bufView","strLen","charCodeAt","object","rootType","settings","TypedJSON","parseAsArray","dimensions","parseAsSet","parseAsMap","valueType","toPlainJson","toPlainArray","toPlainSet","toPlainMap","keyCtor","valueCtor","stringify","stringifyAsArray","stringifyAsSet","stringifyAsMap","setGlobalConfig","config","_globalConfig","concat","errorHandler","replacer","typeResolver","typeHintEmitter","indent","nameResolver","knownType","globalKnownTypes","rootConstructor","rootMetadata","ktc","knownTypeCtor","fill","_mapKnownTypes","elementConstructorArray","constructors","jsonObject","optionsOrTarget","decorator","target","memberMetadata","onDeserialized","beforeSerialization","initializer","optionsBase","knownTypeMethodName","jsonMember","propCtor","isSpecialPropertyType","emitDefaultValue","toString","reflectPropCtor","jsonArrayMember","elementCtor","jsonSetMember","jsonMapMember","valueConstructor","toJson","toJsonDecorator","overwrite","toJSON","Error","getPrototypeOf","c","d","getter","o","r","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","n","property","call","p","s","moduleId","l","modules"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport const MISSING_REFLECT_CONF_MSG = 'Are you sure, that you have both \"experimentalDecorators\"' +\n    ' and \"emitDecoratorMetadata\" in your tsconfig.json?';\n\nexport function getDefaultValue<T>(type: { new (): T }): T|undefined\n{\n    switch (type as any)\n    {\n        case Number:\n            return 0 as any;\n\n        case String:\n            return \"\" as any;\n\n        case Boolean:\n            return false as any;\n\n        case Array:\n            return [] as any;\n\n        default:\n            return undefined;\n    }\n}\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param type The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean\n{\n    return !!(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isDirectlyDeserializableNativeType(type: Function): boolean\n{\n    return !!(~[Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean\n{\n    return !!(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isPrimitiveValue(obj: any): boolean\n{\n    switch (typeof obj)\n    {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            return true;\n        default:\n            return (obj instanceof String || obj instanceof Number || obj instanceof Boolean);\n    }\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\nfunction shouldOmitParseString(jsonStr: string, expectedType: Function): boolean {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n\n    const hasQuotes = jsonStr.length >= 2 && jsonStr[0] === '\"' && jsonStr[jsonStr.length-1] === '\"';\n    const isInteger = /^\\d+$/.test(jsonStr.trim());\n\n    return (expectsTypesSerializedAsStrings && !hasQuotes) || ((!hasQuotes && !isInteger) && expectedType === Date);\n}\n\nexport function parseToJSObject(json: any, expectedType: Function): Object {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType))\n    {\n      return json;\n    }\n    return JSON.parse(json);\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error(message, ...optionalParams);\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`ERROR: ${message}`, ...optionalParams);\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(message, ...optionalParams);\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn(message, ...optionalParams);\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`WARNING: ${message}`, ...optionalParams);\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    return \"undefined\";\n}\n","import { nameof, logError, METADATA_FIELD_KEY, isDirectlySerializableNativeType, isTypeTypedArray } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { OptionsBase } from \"./options-base\";\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Constuctor (type) reference of the member. */\n    ctor?: Function;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    options?: OptionsBase;\n\n    /** If the json member is an array, map or set, sets member options of elements/values. Subsequent values define the types of nested arrays. */\n    elementType?: Function[];\n\n    /** If the json member is a map, sets member options of array keys. */\n    keyType?: Function;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    public static getFromConstructor(ctor: Function): JsonObjectMetadata|undefined\n    {\n        const prototype = ctor.prototype;\n        if (!prototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor))\n        {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    public static getKnownTypeNameFromType(constructor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean\n    {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers: Map<string, JsonMemberMetadata> = new Map<string, JsonMemberMetadata>();\n\n    public knownTypes: Set<Function> = new Set<Function>();\n\n    public knownTypeMethodName?: string;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    public isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public options?: OptionsBase;\n\n    public onDeserializedMethodName?: string;\n\n    public beforeSerializationMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(constructor: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(constructor.constructor)}.${String(propKey)}`; // For error messages.\n    let objectMetadata: JsonObjectMetadata;\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof constructor === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof constructor[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.ctor && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown ctor.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    if (!constructor.hasOwnProperty(METADATA_FIELD_KEY))\n    {\n        // No *own* metadata, create new.\n        objectMetadata = new JsonObjectMetadata(constructor.constructor);\n\n        // Inherit @JsonMembers from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = constructor[METADATA_FIELD_KEY];\n        if (parentMetadata) // && !constructor.hasOwnProperty(Helpers.METADATA_FIELD_KEY)\n        {\n            parentMetadata.dataMembers.forEach((_metadata, _propKey) => objectMetadata.dataMembers.set(_propKey, _metadata));\n        }\n\n        // ('constructor' is the prototype of the involved class, metadata information is added to this class prototype).\n        Object.defineProperty(constructor, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n    }\n    else\n    {\n        // JsonObjectMetadata already exists on 'constructor'.\n        objectMetadata = constructor[METADATA_FIELD_KEY];\n    }\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        objectMetadata.knownTypes.add(metadata.ctor);\n    }\n\n    if (metadata.keyType)\n        objectMetadata.knownTypes.add(metadata.keyType);\n\n    if (metadata.elementType)\n        metadata.elementType.forEach(elemCtor => objectMetadata.knownTypes.add(elemCtor));\n\n    // clear metadata of undefined properties to save memory\n    (Object.keys(metadata) as [keyof JsonMemberMetadata])\n        .forEach((key) => (metadata[key] === undefined) && delete metadata[key]);\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","/**\n * This options cascade through the annotations. Options set\n * in the more specific place override the previous option.\n * Ex. @jsonMember overrides TypedJson options.\n */\nexport interface OptionsBase {\n    /**\n     * Whether to preserve null in the JSON output. When false it\n     * will not emit nor store the property if its value is null.\n     * Default: false.\n     */\n    preserveNull?: boolean;\n}\n\nconst kAllOptions: (keyof OptionsBase)[] = [\n    'preserveNull',\n];\n\nexport function extractOptionBase(from: {[key: string]: any} & OptionsBase): OptionsBase|undefined {\n    const options = Object.keys(from)\n        .filter(key => (kAllOptions as string[]).indexOf(key) > -1)\n        .reduce((obj, key) => {\n            obj[key] = from[key];\n            return obj;\n        }, {} as any);\n    return Object.keys(options).length > 0 ? options : undefined;\n}\n\nexport function getDefaultOptionOf<K extends keyof OptionsBase>(key: K): Required<OptionsBase>[K] {\n    switch (key) {\n        case \"preserveNull\":\n            return false;\n    }\n    // never reached\n    return null as any;\n}\n\nexport function getOptionValue<K extends keyof OptionsBase>(\n    key: K,\n    options?: OptionsBase,\n): Required<OptionsBase>[K] {\n    if (options && options[key] != null) return options[key]!;\n    return getDefaultOptionOf(key);\n}\n\nexport function mergeOptions(\n    existing?: OptionsBase,\n    moreSpecific?: OptionsBase,\n): OptionsBase|undefined {\n    return !moreSpecific\n        ? existing\n        : Object.assign(\n            {},\n            existing,\n            moreSpecific,\n        );\n}\n","import {\n    isDirectlySerializableNativeType,\n    isInstanceOf,\n    isTypeTypedArray,\n    isValueDefined,\n    logError,\n    nameof,\n} from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\nimport { getOptionValue, mergeOptions, OptionsBase } from \"./options-base\";\n\nexport interface IScopeTypeInfo\n{\n    selfType: Function;\n    elementTypes?: Function[];\n    keyType?: Function;\n}\n\nexport interface IScopeArrayTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Array<any>;\n    elementTypes: Function[];\n}\n\nfunction isArrayTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeArrayTypeInfo {\n    return typeInfo.selfType === Array;\n}\n\nexport interface IScopeSetTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Set<any>;\n    elementTypes: [Function];\n}\n\nfunction isSetTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeSetTypeInfo {\n    return typeInfo.selfType === Set;\n}\n\nexport interface IScopeMapTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Map<any, any>;\n    elementTypes: [Function];\n    keyType: Function;\n}\n\nfunction isMapTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeMapTypeInfo {\n    return typeInfo.selfType === Map;\n}\n\nexport type TypeHintEmitter\n    = (\n        targetObject: IndexedObject,\n        sourceObject: IndexedObject,\n        expectedSourceType: Function,\n        sourceTypeMetadata?: JsonObjectMetadata,\n    ) => void;\n\nfunction defaultTypeEmitter(\n    targetObject: IndexedObject,\n    sourceObject: IndexedObject,\n    expectedSourceType: Function,\n    sourceTypeMetadata?: JsonObjectMetadata,\n) {\n    // By default, we put a \"__type\" property on the output object if the actual object is not the\n    // same as the expected one, so that deserialization will know what to deserialize into (given\n    // the required known-types are defined, and the object is a valid subtype of the expected type).\n    if (sourceObject.constructor !== expectedSourceType)\n    {\n        targetObject.__type = sourceTypeMetadata && sourceTypeMetadata.name\n            ? sourceTypeMetadata.name\n            : nameof(sourceObject.constructor);\n    }\n}\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class\n * instances, and so on) to an untyped javascript object (also called \"simple javascript object\"),\n * and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the\n * last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    public options?: OptionsBase;\n    private _typeHintEmitter: TypeHintEmitter = defaultTypeEmitter;\n    private _errorHandler: (error: Error) => void = logError;\n\n    public setTypeHintEmitter(typeEmitterCallback: TypeHintEmitter)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this._typeHintEmitter = typeEmitterCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(\n        sourceObject: any,\n        typeInfo: IScopeTypeInfo,\n        memberName: string = \"object\",\n        memberOptions?: OptionsBase,\n    ): any {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) return null;\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeInfo.selfType))\n        {\n            let expectedName = nameof(typeInfo.selfType);\n            let actualName = nameof(sourceObject.constructor);\n\n            this._errorHandler(new TypeError(\n                `Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`),\n            );\n            return;\n        }\n\n        if (isDirectlySerializableNativeType(typeInfo.selfType))\n        {\n            return sourceObject;\n        }\n        else if (typeInfo.selfType === ArrayBuffer)\n        {\n            return this.convertAsArrayBuffer(sourceObject);\n        }\n        else if (typeInfo.selfType === DataView)\n        {\n            return this.convertAsDataView(sourceObject);\n        }\n        else if (isArrayTypeInfo(typeInfo))\n        {\n            return this.convertAsArray(sourceObject, typeInfo.elementTypes, memberName, memberOptions);\n        }\n        else if (isSetTypeInfo(typeInfo))\n        {\n            return this.convertAsSet(sourceObject, typeInfo.elementTypes[0], memberName, memberOptions);\n        }\n        else if (isMapTypeInfo(typeInfo))\n        {\n            return this.convertAsMap(sourceObject, typeInfo.keyType, typeInfo.elementTypes[0], memberName, memberOptions);\n        }\n        else if (isTypeTypedArray(typeInfo.selfType))\n        {\n            return this.convertAsTypedArray(sourceObject);\n        }\n        else if (typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName, memberOptions);\n        }\n    }\n\n    /**\n     * Performs the conversion of a typed object (usually a class instance) to a simple\n     * javascript object for serialization.\n     */\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        typeInfo: IScopeTypeInfo,\n        memberName?: string,\n        memberOptions?: OptionsBase,\n    ) {\n        let sourceTypeMetadata: JsonObjectMetadata|undefined;\n        let targetObject: IndexedObject;\n\n        if (sourceObject.constructor !== typeInfo.selfType && sourceObject instanceof typeInfo.selfType)\n        {\n            // The source object is not of the expected type, but it is a valid subtype.\n            // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n        }\n        else\n        {\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeInfo.selfType);\n        }\n\n        if (sourceTypeMetadata)\n        {\n\n            if (sourceTypeMetadata.beforeSerializationMethodName) {\n                // check for member first\n                if (typeof (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName] === \"function\")\n                {\n                    (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n                }\n                // check for static\n                else if (typeof (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName] === \"function\")\n                {\n                    (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n                }\n                else \n                {\n                    this._errorHandler(new TypeError(\n                        `beforeSerialization callback '${nameof(sourceTypeMetadata.classType)}.${sourceTypeMetadata.beforeSerializationMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            const sourceMeta = sourceTypeMetadata;\n            // Strong-typed serialization available.\n            // We'll serialize by members that have been marked with @jsonMember (including array/set/map members),\n            // and perform recursive conversion on each of them. The converted objects are put on the 'targetObject',\n            // which is what will be put into 'JSON.stringify' finally.\n            targetObject = {};\n\n            const classOptions = mergeOptions(this.options, sourceMeta.options);\n\n            sourceMeta.dataMembers.forEach((objMemberMetadata) =>\n            {\n                const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n                let serialized;\n                if (objMemberMetadata.serializer) {\n                    serialized = objMemberMetadata.serializer(sourceObject[objMemberMetadata.key]);\n                } else if (objMemberMetadata.ctor) {\n                    serialized = this.convertSingleValue(\n                        sourceObject[objMemberMetadata.key],\n                        {\n                            selfType: objMemberMetadata.ctor,\n                            elementTypes: objMemberMetadata.elementType,\n                            keyType: objMemberMetadata.keyType,\n                        },\n                        `${nameof(sourceMeta.classType)}.${objMemberMetadata.key}`,\n                        objMemberOptions,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Could not serialize ${objMemberMetadata.name}, there is`\n                        + ` no constructor nor serialization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(serialized)\n                    || (this.retrievePreserveNull(objMemberOptions) && serialized === null)\n                ) {\n                    targetObject[objMemberMetadata.name] = serialized;\n                }\n            });\n        }\n        else\n        {\n            // Untyped serialization, \"as-is\", we'll just pass the object on.\n            // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify to the original object.\n            targetObject = { ...sourceObject };\n        }\n\n        // Add type-hint.\n        this._typeHintEmitter(targetObject, sourceObject, typeInfo.selfType, sourceTypeMetadata);\n\n        return targetObject;\n    }\n\n    /**\n     * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects (or primitive values) for\n     * serialization.\n     * @param expectedElementType The expected type of elements. If the array is supposed to be multi-dimensional, subsequent elements define lower dimensions.\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @param memberOptions If converted as a member, the member options.\n     */\n    public convertAsArray(\n        sourceObject: any[],\n        expectedElementType: Function[],\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): any[] {\n        if (expectedElementType.length === 0 || !expectedElementType[0])\n           throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n\n        // Check the type of each element, individually.\n        // If at least one array element type is incorrect, we return undefined, which results in no\n        // value emitted during serialization. This is so that invalid element types don't unexpectedly\n        // alter the ordering of other, valid elements, and that no unexpected undefined values are in\n        // the emitted array.\n        sourceObject.forEach((element, i) =>\n        {\n            if (!(this.retrievePreserveNull(memberOptions) && element === null)\n                && !isInstanceOf(element, expectedElementType[0])\n            ) {\n                const expectedTypeName = nameof(expectedElementType[0]);\n                const actualTypeName = element && nameof(element.constructor);\n                throw new TypeError(`Could not serialize ${memberName}[${i}]:` +\n                    ` expected '${expectedTypeName}', got '${actualTypeName}'.`);\n            }\n        });\n\n        const typeInfoForElements: IScopeTypeInfo = {\n            selfType: expectedElementType[0],\n            // For multidimensional arrays.\n            elementTypes: expectedElementType.length > 1 ? expectedElementType.slice(1) : [],\n        };\n\n        if (memberName)\n        {\n            // Just for debugging purposes.\n            memberName += \"[]\";\n        }\n\n        return sourceObject.map(\n            element => this.convertSingleValue(\n                element, typeInfoForElements, memberName, memberOptions\n            ),\n        );\n    }\n\n    /**\n     * Performs the conversion of a set of typed objects (or primitive values) into an array\n     * of simple javascript objects.\n     *\n     * @param sourceObject\n     * @param expectedElementType The constructor of the expected Set elements\n     *        (e.g. `Number` for `Set<number>`, or `MyClass` for `Set<MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @param memberOptions If converted as a member, the member options.\n     * @returns\n     */\n    public convertAsSet(\n        sourceObject: Set<any>,\n        expectedElementType: Function,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): any[] {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n        };\n\n        // For debugging and error tracking.\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: any[] = [];\n\n        // Convert each element of the set, and put it into an output array.\n        // The output array is the one serialized, as JSON.stringify does not support Set serialization.\n        // (TODO: clarification needed)\n        sourceObject.forEach(element =>\n        {\n            let resultElement = this.convertSingleValue(element, elementTypeInfo, memberName, memberOptions);\n\n            // Add to output if the source element was undefined, OR the converted element is defined.\n            // This will add intentionally undefined values to output, but not values that became undefined\n            // DURING serializing (usually because of a type-error).\n            if (!isValueDefined(element) || isValueDefined(resultElement))\n            {\n                resultArray.push(resultElement);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a map of typed objects (or primitive values) into an array\n     * of simple javascript objects with `key` and `value` properties.\n     *\n     * @param sourceObject\n     * @param expectedKeyType The constructor of the expected Map keys\n     *        (e.g. `Number` for `Map<number, any>`, or `MyClass` for `Map<MyClass, any>`).\n     * @param expectedElementType The constructor of the expected Map values\n     *        (e.g. `Number` for `Map<any, number>`, or `MyClass` for `Map<any, MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @param memberOptions If converted as a member, the member options.\n     */\n    public convertAsMap(\n        sourceObject: Map<any, any>,\n        expectedKeyType: Function,\n        expectedElementType: Function,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): Array<{ key: any, value: any }> {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n\n        if (!expectedKeyType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n            elementTypes: [expectedElementType]\n        };\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfType: expectedKeyType\n        };\n\n        if (memberName) memberName += \"[]\";\n\n        const resultArray: Array<{ key: any, value: any }> = [];\n        const preserveNull = this.retrievePreserveNull(memberOptions);\n\n        // Convert each *entry* in the map to a simple javascript object with key and value properties.\n        sourceObject.forEach((value, key) =>\n        {\n            let resultKeyValuePairObj = {\n                key: this.convertSingleValue(key, keyTypeInfo, memberName, memberOptions),\n                value: this.convertSingleValue(value, elementTypeInfo, memberName, memberOptions),\n            };\n\n            // We are not going to emit entries with undefined keys OR undefined values.\n            const keyDefined = isValueDefined(resultKeyValuePairObj.key);\n            const valueDefined = isValueDefined(resultKeyValuePairObj.value)\n                || (resultKeyValuePairObj.value === null && preserveNull);\n            if (keyDefined && valueDefined)\n            {\n                resultArray.push(resultKeyValuePairObj);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n     * This is needed because typed arrays are otherwise serialized as objects, so we'll end up\n     * with something like \"{ 0: 0, 1: 1, ... }\".\n     *\n     * @param sourceObject\n     * @returns\n     */\n    public convertAsTypedArray(sourceObject: ArrayBufferView)\n    {\n        return Array.from(sourceObject as any);\n    }\n\n    /**\n     * Performs the conversion of a raw ArrayBuffer to a string.\n     */\n    public convertAsArrayBuffer(buffer: ArrayBuffer)\n    {\n        // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n        return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n    }\n\n    /**\n     * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and\n     * returning that string.\n     */\n    public convertAsDataView(dataView: DataView)\n    {\n        return this.convertAsArrayBuffer(dataView.buffer);\n    }\n\n    private retrievePreserveNull(memberOptions?: OptionsBase): boolean {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n}\n","import { nameof, logError, isSubtypeOf, isValueDefined, isDirectlyDeserializableNativeType } from \"./helpers\";\nimport { Constructor, IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\nimport { getOptionValue, mergeOptions, OptionsBase } from \"./options-base\";\n\nexport interface IScopeTypeInfo\n{\n    selfConstructor: Function;\n    elementConstructor?: Function[];\n    keyConstructor?: Function;\n    knownTypes: Map<string, Function>;\n}\n\nexport type TypeResolver = (sourceObject: Object, knownTypes: Map<string, Function>) => Function|undefined|null;\n\nfunction defaultTypeResolver(sourceObject: any, knownTypes: Map<string, Function>): Function|undefined {\n    if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n}\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    public options?: OptionsBase;\n\n    private _typeResolver: TypeResolver = defaultTypeResolver;\n    private _nameResolver?: (ctor: Function) => string;\n    private _errorHandler: (error: Error) => void = logError;\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this._nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: TypeResolver)\n    {\n        if (typeof typeResolverCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeResolverCallback' is not a function.\");\n        }\n\n        this._typeResolver = typeResolverCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        sourceObjectTypeInfo: IScopeTypeInfo,\n        objectName = \"object\",\n        memberOptions?: OptionsBase,\n    ) {\n        if (typeof sourceObject !== \"object\" || sourceObject === null)\n        {\n            this._errorHandler(new TypeError(`Cannot deserialize ${objectName}: 'sourceObject' must be a defined object.`));\n            return undefined;\n        }\n\n        let expectedSelfType = sourceObjectTypeInfo.selfConstructor;\n        let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n        let knownTypeConstructors = sourceObjectTypeInfo.knownTypes;\n\n        if (sourceObjectMetadata)\n        {\n            // Merge known types received from \"above\" with known types defined on the current type.\n            knownTypeConstructors = this._mergeKnownTypes(\n                knownTypeConstructors,\n                this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n            );\n        }\n\n        // Check if a type-hint is available from the source object.\n        const typeFromTypeHint = this._typeResolver(sourceObject, knownTypeConstructors);\n\n        if (typeFromTypeHint)\n        {\n            // Check if type hint is a valid subtype of the expected source type.\n            if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n            {\n                // Hell yes.\n                expectedSelfType = typeFromTypeHint;\n                sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n                if (sourceObjectMetadata)\n                {\n                    // Also merge new known types from subtype.\n                    knownTypeConstructors = this._mergeKnownTypes(\n                        knownTypeConstructors,\n                        this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                    );\n                }\n            }\n        }\n\n        if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n        {\n            const sourceMetadata = sourceObjectMetadata;\n            // Strong-typed deserialization available, get to it.\n            // First deserialize properties into a temporary object.\n            const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n            const classOptions = mergeOptions(this.options, sourceMetadata.options);\n\n            // Deserialize by expected properties.\n            sourceMetadata.dataMembers.forEach((objMemberMetadata, propKey) =>\n            {\n                const objMemberValue = sourceObject[propKey];\n                const objMemberDebugName = `${nameof(sourceMetadata.classType)}.${propKey}`;\n                const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n\n                let revivedValue;\n                if (objMemberMetadata.deserializer) {\n                    revivedValue = objMemberMetadata.deserializer(objMemberValue);\n                } else if (objMemberMetadata.ctor) {\n                    revivedValue = this.convertSingleValue(\n                        objMemberValue,\n                        {\n                            selfConstructor: objMemberMetadata.ctor,\n                            elementConstructor: objMemberMetadata.elementType,\n                            keyConstructor: objMemberMetadata.keyType,\n                            knownTypes: knownTypeConstructors\n                        },\n                        objMemberDebugName,\n                        objMemberOptions,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Cannot deserialize ${objMemberDebugName} there is`\n                        + ` no constructor nor deserialization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(revivedValue)\n                    || (this.retrievePreserveNull(objMemberOptions) && revivedValue === null)\n                ) {\n                    sourceObjectWithDeserializedProperties[objMemberMetadata.key] = revivedValue;\n                }\n                else if (objMemberMetadata.isRequired)\n                {\n                    this._errorHandler(new TypeError(`Missing required member '${objMemberDebugName}'.`));\n                }\n            });\n\n            // Next, instantiate target object.\n            let targetObject: IndexedObject;\n\n            if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n            {\n                try\n                {\n                    targetObject = sourceObjectMetadata.initializerCallback(\n                        sourceObjectWithDeserializedProperties,\n                        sourceObject,\n                    );\n\n                    // Check the validity of user-defined initializer callback.\n                    if (!targetObject)\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + ` 'initializer' function returned undefined/null`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                        );\n                    }\n                    else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected`\n                            + `, and '${nameof(targetObject.constructor)}' is not a subtype of`\n                            + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                        );\n                    }\n                }\n                catch (e)\n                {\n                    this._errorHandler(e);\n                    return undefined;\n                }\n            }\n            else\n            {\n                targetObject = this._instantiateType(expectedSelfType);\n            }\n\n            // Finally, assign deserialized properties to target object.\n            Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n            // Call onDeserialized method (if any).\n            if (sourceObjectMetadata.onDeserializedMethodName)\n            {\n                // check for member first\n                if (typeof (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                // check for static\n                else if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                else\n                {\n                    this._errorHandler(new TypeError(\n                        `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            return targetObject;\n        }\n        else\n        {\n            // Untyped deserialization into Object instance.\n            let targetObject = {} as IndexedObject;\n\n            Object.keys(sourceObject).forEach(sourceKey =>\n            {\n                targetObject[sourceKey] = this.convertSingleValue(sourceObject[sourceKey], {\n                    selfConstructor: sourceObject[sourceKey].constructor,\n                    knownTypes: sourceObjectTypeInfo.knownTypes,\n                    elementConstructor: sourceObjectTypeInfo.elementConstructor,\n                    keyConstructor: sourceObjectTypeInfo.keyConstructor\n                }, sourceKey);\n            });\n\n            return targetObject;\n        }\n    }\n\n    public convertSingleValue(\n        sourceObject: any,\n        typeInfo: IScopeTypeInfo,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ) {\n        let expectedSelfType = typeInfo.selfConstructor;\n        let srcTypeNameForDebug = sourceObject ? nameof(sourceObject.constructor) : \"undefined\";\n\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null)\n        {\n            return null;\n        }\n        else if (!isValueDefined(sourceObject))\n        {\n            return;\n        }\n        else if (isDirectlyDeserializableNativeType(expectedSelfType))\n        {\n            if (sourceObject.constructor === expectedSelfType)\n            {\n                return sourceObject;\n            }\n            else\n            {\n                throw new TypeError(this._makeTypeErrorMessage(nameof(expectedSelfType), sourceObject.constructor, memberName));\n            }\n        }\n        else if (expectedSelfType === Date)\n        {\n            // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n            // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n            if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n                return new Date(sourceObject as any);\n            else if (sourceObject instanceof Date)\n                return sourceObject\n            else\n                this._throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float32Array || expectedSelfType === Float64Array)\n        {\n            // Deserialize Float Array from number[].\n            return this._convertAsFloatArray(\n                sourceObject,\n                expectedSelfType as any,\n                srcTypeNameForDebug,\n                memberName,\n            );\n        }\n        else if (\n            expectedSelfType === Uint8Array\n            || expectedSelfType === Uint8ClampedArray\n            || expectedSelfType === Uint16Array\n            || expectedSelfType === Uint32Array\n        ) {\n            // Deserialize Uint array from number[].\n            return this._convertAsUintArray(\n                sourceObject,\n                expectedSelfType as any,\n                srcTypeNameForDebug,\n                memberName,\n            );\n        }\n        else if (expectedSelfType === ArrayBuffer)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToArrayBuffer(sourceObject);\n            else\n                this._throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === DataView)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToDataView(sourceObject);\n            else\n                this._throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Array)\n        {\n            if (Array.isArray(sourceObject))\n                return this.convertAsArray(sourceObject, typeInfo, memberName, memberOptions);\n            else\n                throw new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName));\n        }\n        else if (expectedSelfType === Set)\n        {\n            if (Array.isArray(sourceObject))\n                return this.convertAsSet(sourceObject, typeInfo, memberName, memberOptions);\n            else\n                this._throwTypeMismatchError(\"Set\", \"Array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Map)\n        {\n            if (Array.isArray(sourceObject))\n                return this.convertAsMap(sourceObject, typeInfo, memberName, memberOptions);\n            else\n                this._throwTypeMismatchError(\"Map\", \"a source array of key-value-pair objects\", srcTypeNameForDebug, memberName);\n        }\n        else if (sourceObject && typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName, memberOptions);\n        }\n    }\n\n    public convertAsArray(\n        sourceObject: any,\n        typeInfo: IScopeTypeInfo,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): any[] {\n        if (!(Array.isArray(sourceObject)))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return [];\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`));\n            return [];\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        return sourceObject.map(element =>\n        {\n            // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n            // entries, as an Array is ordered.\n            try\n            {\n                return this.convertSingleValue(element, elementTypeInfo, `${memberName}[]`, memberOptions);\n            }\n            catch (e)\n            {\n                this._errorHandler(e);\n\n                // Keep filling the array here with undefined to keep original ordering.\n                // Note: this is just aesthetics, not returning anything produces the same result.\n                return undefined;\n            }\n        });\n    }\n\n    public convertAsSet(\n        sourceObject: any,\n        typeInfo: IScopeTypeInfo,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): Set<any> {\n        if (!(Array.isArray(sourceObject)))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return new Set<any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`));\n            return new Set<any>();\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n        let resultSet = new Set<any>();\n\n        sourceObject.forEach((element, i) =>\n        {\n            try\n            {\n                resultSet.add(this.convertSingleValue(\n                    element,\n                    elementTypeInfo,\n                    `${memberName}[${i}]`,\n                    memberOptions,\n                ));\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Set is not ordered, and skipping an entry\n                // does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultSet;\n    }\n\n    public convertAsMap(\n        sourceObject: any,\n        typeInfo: IScopeTypeInfo,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): Map<any, any> {\n        if (!(Array.isArray(sourceObject)))\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n\n        if (!typeInfo.keyConstructor)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n            return new Map<any, any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n            return new Map<any, any>();\n        }\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.keyConstructor,\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let valueTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let resultMap = new Map<any, any>();\n\n        sourceObject.forEach((element: any) =>\n        {\n            try\n            {\n                let key = this.convertSingleValue(element.key, keyTypeInfo, memberName, memberOptions);\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(\n                        key,\n                        this.convertSingleValue(\n                            element.value,\n                            valueTypeInfo,\n                            `${memberName}[${key}]`,\n                            memberOptions,\n                        ),\n                    );\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultMap;\n    }\n\n    private _convertAsFloatArray<T extends Float32Array | Float64Array>(\n        sourceObject: any,\n        arrayType: Constructor<T>,\n        srcTypeNameForDebug: string,\n        memberName: string,\n    ): T {\n        if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem)))\n            return new arrayType(sourceObject);\n        return this._throwTypeMismatchError(\n            arrayType.name,\n            \"a numeric source array\",\n            srcTypeNameForDebug,\n            memberName,\n        );\n    }\n\n    private _convertAsUintArray<T extends Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array>(\n        sourceObject: any,\n        arrayType: Constructor<T>,\n        srcTypeNameForDebug: string,\n        memberName: string,\n    ): T {\n        if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem)))\n            return new arrayType(sourceObject.map(value => ~~value));\n        return this._throwTypeMismatchError(\n            arrayType.name,\n            \"a numeric source array\",\n            srcTypeNameForDebug,\n            memberName,\n        );\n    }\n\n    private _throwTypeMismatchError(\n        targetType: string,\n        expectedSourceType: string,\n        actualSourceType: string,\n        memberName: string,\n    ): never {\n        throw new TypeError(\n            `Could not deserialize ${memberName} as ${targetType}:`\n            + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n        );\n    }\n\n    private _makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName: string)\n    {\n        const expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n        const actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n        return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n    }\n\n    private _instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    private _mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this._nameResolver)\n                {\n                    result.set(this._nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    private _createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this._nameResolver)\n            {\n                map.set(this._nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private _stringToArrayBuffer(str: string)\n    {\n        let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        let bufView = new Uint16Array(buf);\n\n        for (let i = 0, strLen = str.length; i < strLen; i++)\n        {\n            bufView[i] = str.charCodeAt(i);\n        }\n\n        return buf;\n    }\n\n    private _stringToDataView(str: string)\n    {\n        return new DataView(this._stringToArrayBuffer(str));\n    }\n\n    private retrievePreserveNull(memberOptions?: OptionsBase): boolean {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n}\n","import { Constructor } from \"./typedjson/types\";\nimport { Serializer, TypeHintEmitter } from \"./typedjson/serializer\";\nimport { Deserializer, TypeResolver } from \"./typedjson/deserializer\";\nimport { JsonObjectMetadata } from \"./typedjson/metadata\";\nimport { logError, logWarning, nameof, parseToJSObject } from \"./typedjson/helpers\";\nimport { extractOptionBase, OptionsBase } from \"./typedjson/options-base\";\n\nexport type JsonTypes = Object|boolean|string|number|null|undefined;\nexport { TypeResolver, TypeHintEmitter };\n\nexport interface ITypedJSONSettings extends OptionsBase\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: TypeResolver;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?: TypeHintEmitter;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Constructor<K>,\n        valueType: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Object[]|undefined {\n        return new TypedJSON(elementType, settings).toPlainSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): { key: any, value: any }[]|undefined {\n        return new TypedJSON(valueCtor, settings).toPlainMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Constructor<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootType The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Constructor<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation))\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        const options = extractOptionBase(settings);\n        this.serializer.options = options;\n        this.deserializer.options = options;\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const json = parseToJSObject(object, this.rootConstructor);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(json, {\n                selfConstructor: this.rootConstructor,\n                knownTypes: knownTypes,\n            }) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const json = parseToJSObject(object, Array);\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsArray(json, {\n                selfConstructor: Array,\n                elementConstructor: new Array(dimensions - 1)\n                    .fill(Array)\n                    .concat(this.rootConstructor),\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define an Array`\n                + `, but got ${typeof json}.`));\n        }\n\n        return [];\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const json = parseToJSObject(object, Set);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsSet(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes)\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Set<T>();\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Constructor<K>): Map<K, T>\n    {\n        const json = parseToJSObject(object, Map);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsMap(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n                keyConstructor: keyConstructor\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Map<K, T>();\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): JsonTypes\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(\n                object,\n        {selfType: this.rootConstructor},\n            );\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            const elementConstructorArray =\n                new Array(dimensions - 1).fill(Array).concat(this.rootConstructor);\n            return this.serializer.convertAsArray(object, elementConstructorArray);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsSet(object, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): { key: any, value: any }[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsMap(object, keyConstructor, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n","import { Constructor, ParameterlessConstructor } from \"./types\";\nimport { METADATA_FIELD_KEY } from \"./helpers\";\nimport { JsonObjectMetadata } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\nexport type InitializerCallback<T> = (sourceObject: T, rawSourceObject: T) => T;\n\nexport interface IJsonObjectOptionsBase extends OptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints,\n     * or the name of a static method used for determining known types.\n     */\n    knownTypes?: Function[] | string;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name of a static or instance method to call before the serialization\n     * of the typed object is started.\n     */\n    beforeSerialization?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer: InitializerCallback<T>;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer?: InitializerCallback<T>;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional\n * settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Constructor<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: ParameterlessConstructor<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: ParameterlessConstructor<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Constructor<T>\n): ((target: Constructor<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Function\n    ): void {\n        let objectMetadata: JsonObjectMetadata;\n\n        // Create or obtain JsonObjectMetadata object.\n        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n            objectMetadata = new JsonObjectMetadata(target);\n\n            // Inherit json members and known types from parent @jsonObject (if any).\n            const parentMetadata: JsonObjectMetadata = target.prototype[METADATA_FIELD_KEY];\n            if (parentMetadata)\n            {\n                parentMetadata.dataMembers\n                    .forEach((memberMetadata, propKey) =>\n                        objectMetadata.dataMembers.set(propKey, memberMetadata));\n                parentMetadata.knownTypes\n                    .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            }\n\n            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: objectMetadata\n            });\n        }\n        else\n        {\n            // Target already has JsonObjectMetadata associated with it.\n            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n            objectMetadata.classType = target;\n        }\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        objectMetadata.beforeSerializationMethodName = options.beforeSerialization;\n        \n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n        const optionsBase = extractOptionBase(options);\n        if (optionsBase)\n        {\n            objectMetadata.options = optionsBase;\n        }\n\n        // Obtain known-types.\n        if (typeof options.knownTypes === \"string\")\n        {\n            objectMetadata.knownTypeMethodName = options.knownTypes;\n        }\n        else if (options.knownTypes instanceof Array)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf, MISSING_REFLECT_CONF_MSG,\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions extends OptionsBase\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly declared.\n * @param options Additional options.\n */\nexport function jsonMember<TFunction extends Function>(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember(target: Object, propertyKey: string | symbol): void;\n\nexport function jsonMember<TFunction extends Function>(optionsOrTarget?: IJsonMemberOptions | Object, propKey?: string | symbol): PropertyDecorator | void\n{\n    if (optionsOrTarget instanceof Object && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const target = optionsOrTarget as Object;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", target, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime. ${MISSING_REFLECT_CONF_MSG}`);\n                return;\n            }\n\n            if (isSpecialPropertyType(decoratorName, reflectPropCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, propKey, {\n                ctor: reflectPropCtor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrTarget || {};\n            let propCtor: Function|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                if (isReflectMetadataSupported && !isSubtypeOf(options.constructor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n\n                propCtor = options.constructor;\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    propCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!propCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (isSpecialPropertyType(decoratorName, propCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, _propKey, {\n                ctor: propCtor,\n                emitDefaultValue: options.emitDefaultValue,\n                isRequired: options.isRequired,\n                options: extractOptionBase(options),\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, propCtor?: Function)\n{\n    if (propCtor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { nameof, logError, isReflectMetadataSupported, MISSING_REFLECT_CONF_MSG } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions extends OptionsBase\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Array,\n            elementType: createArrayElementType(elementConstructor, dimensions),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nfunction createArrayElementType(elementCtor: Function, dimensions: number) {\n    const elementTypes = new Array(dimensions).fill(Array, 0, -1);\n    elementTypes[dimensions-1] = elementCtor;\n    return elementTypes;\n}\n","import { isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions extends OptionsBase\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        const decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            logError(`${decoratorName}: property is not a Set. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Set,\n            elementType: [elementConstructor],\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported, MISSING_REFLECT_CONF_MSG } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions extends OptionsBase\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(keyConstructor: Function, valueConstructor: Function, options: IJsonMapMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof keyConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (typeof valueConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Map,\n            elementType: [valueConstructor],\n            keyType: keyConstructor,\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { TypedJSON } from \"../parser\";\n\n/**\n * Options for the @toJson decorator.\n */\nexport interface IToJsonOptions {\n    /**\n     * When set to true it will overwrite any toJSON already existing on the prototype.\n     */\n    overwrite?: boolean;\n}\n\n/**\n * Decorator that will generate toJSON function on the class prototype that allows\n * JSON.stringify to be used instead of TypedJSON.stringify. Under the hood it will\n * simply delegate to TypedJSON.\n * By default it will throw if the prototype already has a toJSON function defined.\n * @param target the class which prototype should be modified.\n */\nexport function toJson<T extends Object>(target: Function): void;\n/**\n * Decorator factory that accepts the options interface.\n * @param options for configuring the toJSON creation.\n */\nexport function toJson<T extends Object>(options: IToJsonOptions): ((target: Function) => void);\nexport function toJson<T extends Object>(optionsOrTarget: IToJsonOptions | Function\n): ((target: Function) => void) | void {\n    if (typeof optionsOrTarget === 'function') {\n        // used directly\n        toJsonDecorator(optionsOrTarget, {});\n        return;\n    }\n    // used as a factory\n    return (target: Function) => {\n        toJsonDecorator(target, optionsOrTarget);\n    }\n}\n\nfunction toJsonDecorator<T extends Object>(target: Function, options: IToJsonOptions): void {\n    if (!options.overwrite && target.prototype.toJSON) {\n        throw new Error(`${target.name} already has toJSON defined!`);\n    }\n    target.prototype.toJSON = function () {\n        return TypedJSON.toPlainJson(this, Object.getPrototypeOf(this).constructor);\n    }\n}\n","export { TypedJSON, ITypedJSONSettings, JsonTypes, TypeResolver, TypeHintEmitter } from \"./parser\";\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\nexport { toJson } from \"./typedjson/to-json\";\n"],"sourceRoot":""}