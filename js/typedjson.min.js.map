{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/options-base.ts","webpack://typedjson/./src/typedjson/type-descriptor.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/parser.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson/to-json.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","m","MISSING_REFLECT_CONF_MSG","parseToJSObject","json","expectedType","jsonStr","expectsTypesSerializedAsStrings","String","ArrayBuffer","DataView","hasQuotes","length","isInteger","test","trim","Date","JSON","parse","isSubtypeOf","A","B","prototype","logError","message","console","error","optionalParams","log","logWarning","warn","isValueDefined","value","isInstanceOf","constructor","Number","Boolean","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","name","identity","arg","METADATA_FIELD_KEY","getJsonObjectName","ctor","metadata","JsonObjectMetadata","getFromConstructor","classType","hasOwnProperty","isExplicitlyMarked","doesHandleWithoutAnnotation","primitiveMeta","ensurePresentInPrototype","objectMetadata","parentMetadata","dataMembers","forEach","memberMetadata","propKey","set","knownTypes","knownType","add","typeResolver","typeHintEmitter","Object","defineProperty","enumerable","configurable","writable","getKnownTypeNameFromType","indexOf","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Map","Set","isHandledWithoutAnnotation","injectMetadataInformation","decoratorName","type","deserializer","getTypes","keys","key","undefined","kAllOptions","extractOptionBase","from","options","filter","reduce","obj","getOptionValue","getDefaultOptionOf","mergeOptions","existing","moreSpecific","assign","TypeDescriptor","GenericTypeDescriptor","concat","elementType","Array","ArrayT","ArrayTypeDescriptor","ensureTypeDescriptor","SetT","SetTypeDescriptor","keyType","valueType","getCompleteOptions","shape","MapT","MapTypeDescriptor","isTypelike","ConcreteTypeDescriptor","defaultTypeEmitter","targetObject","sourceObject","expectedSourceType","sourceTypeMetadata","__type","setTypeHintEmitter","typeEmitterCallback","TypeError","getTypeHintEmitter","setErrorHandler","errorHandlerCallback","errorHandler","getErrorHandler","retrievePreserveNull","memberOptions","convertSingleValue","typeDescriptor","memberName","serializer","serializationStrategy","get","beforeSerializationMethodName","objMemberMetadata","serialized","objMemberOptions","convertAsObject","expectedName","actualName","convertAsArrayBuffer","convertAsDataView","convertAsArray","convertAsSet","convertAsMap","convertAsTypedArray","element","i","expectedTypeName","actualTypeName","map","resultArray","resultElement","push","resultShape","result","preserveNull","resultKeyValuePairObj","keyDefined","valueDefined","buffer","charCode","fromCharCode","join","dataView","defaultTypeResolver","setNameResolver","nameResolverCallback","nameResolver","setTypeResolver","typeResolverCallback","getTypeResolver","deserializationStrategy","expectedSelfType","sourceObjectMetadata","knownTypeConstructors","mergeKnownTypes","createKnownTypesMap","typeFromTypeHint","revivedValue","objMemberValue","objMemberDebugName","isRequired","initializerCallback","e","instantiateType","onDeserializedMethodName","sourceKey","knownTypeMaps","knowTypes","knownTypeMeta","isExpectedMapShape","source","expectedShape","isArray","deserializeDirectly","deserializeDate","stringToArrayBuffer","stringToDataView","convertAsFloatArray","convertAsUintArray","throwTypeMismatchError","targetType","actualSourceType","makeTypeErrorMessage","actualType","srcTypeNameForDebug","objectName","resultSet","resultMap","resultKey","createArrayBufferFromString","input","buf","bufView","strLen","charCodeAt","every","elem","isNaN","jsonArrayMember","elementConstructor","target","dimensions","createArrayType","emitDefaultValue","toString","object","rootType","settings","TypedJSON","parseAsArray","parseAsSet","parseAsMap","toPlainJson","toPlainArray","toPlainSet","toPlainMap","keyCtor","valueCtor","stringify","stringifyAsArray","stringifyAsSet","stringifyAsMap","setGlobalConfig","config","_globalConfig","replacer","indent","globalKnownTypes","rootConstructor","rootMetadata","ktc","knownTypeCtor","_mapKnownTypes","keyConstructor","constructors","jsonObject","optionsOrTarget","decorator","onDeserialized","beforeSerialization","initializer","optionsBase","jsonMember","optionsOrPrototype","_propKey","reflectCtor","isSpecialPropertyType","reflectPropCtor","jsonSetMember","jsonMapMember","valueConstructor","toJson","toJsonDecorator","overwrite","toJSON","Error","getPrototypeOf","c","d","getter","o","r","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","n","property","call","p","s","moduleId","l","modules"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Serializable } from './types';\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const MISSING_REFLECT_CONF_MSG = 'Are you sure, that you have both \"experimentalDecorators\"' +\n    ' and \"emitDecoratorMetadata\" in your tsconfig.json?';\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param type The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean\n{\n    return !!(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isDirectlyDeserializableNativeType(type: Function): boolean\n{\n    return !!(~[Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean\n{\n    return !!(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\nfunction shouldOmitParseString(jsonStr: string, expectedType: Function): boolean {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n\n    const hasQuotes = jsonStr.length >= 2 && jsonStr[0] === '\"' && jsonStr[jsonStr.length-1] === '\"';\n    const isInteger = /^\\d+$/.test(jsonStr.trim());\n\n    return (expectsTypesSerializedAsStrings && !hasQuotes) || ((!hasQuotes && !isInteger) && expectedType === Date);\n}\n\nexport function parseToJSObject<T>(json: any, expectedType: Serializable<T>): Object {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType))\n    {\n      return json;\n    }\n    return JSON.parse(json);\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error(message, ...optionalParams);\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`ERROR: ${message}`, ...optionalParams);\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(message, ...optionalParams);\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn(message, ...optionalParams);\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`WARNING: ${message}`, ...optionalParams);\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    return \"undefined\";\n}\n\nexport function identity<T>(arg: T): T {\n    return arg;\n}\n","import { nameof, logError, isDirectlySerializableNativeType, isTypeTypedArray } from \"./helpers\";\nimport { IndexedObject, Serializable } from \"./types\";\nimport { OptionsBase } from \"./options-base\";\nimport { TypeDescriptor } from \"./type-descriptor\";\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport type TypeResolver = (sourceObject: IndexedObject, knownTypes: Map<string, Function>) => Function|undefined|null;\nexport type TypeHintEmitter\n    = (\n        targetObject: IndexedObject,\n        sourceObject: IndexedObject,\n        expectedSourceType: Function,\n        sourceTypeMetadata?: JsonObjectMetadata,\n    ) => void;\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Type descriptor of the member. */\n    type?: TypeDescriptor;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    options?: OptionsBase;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    public static getFromConstructor<T>(ctor: Serializable<T>): JsonObjectMetadata|undefined\n    {\n        const prototype = ctor.prototype;\n        if (!prototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor))\n        {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    public static ensurePresentInPrototype(prototype: IndexedObject): JsonObjectMetadata\n    {\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY)) {\n            return prototype[METADATA_FIELD_KEY];\n        }\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n        const objectMetadata = new JsonObjectMetadata(prototype.constructor);\n\n        // Inherit json members and known types from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = prototype[METADATA_FIELD_KEY];\n        if (parentMetadata)\n        {\n            parentMetadata.dataMembers\n                .forEach((memberMetadata, propKey) =>\n                    objectMetadata.dataMembers.set(propKey, memberMetadata));\n            parentMetadata.knownTypes\n                .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            objectMetadata.typeResolver = parentMetadata.typeResolver;\n            objectMetadata.typeHintEmitter = parentMetadata.typeHintEmitter;\n        }\n\n        Object.defineProperty(prototype, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n        return objectMetadata;\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    public static getKnownTypeNameFromType(constructor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean\n    {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers = new Map<string, JsonMemberMetadata>();\n\n    /** Set of known types used for polymorphic deserialization */\n    public knownTypes = new Set<Serializable<any>>();\n    /** If present override the global function */\n    public typeHintEmitter?: TypeHintEmitter;\n    /** If present override the global function */\n    public typeResolver?: TypeResolver;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    public isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public options?: OptionsBase;\n\n    public onDeserializedMethodName?: string;\n\n    public beforeSerializationMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(prototype: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(propKey)}`; // For error messages.\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof prototype === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof prototype[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.type && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown type.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    const objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(prototype);\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        metadata.type.getTypes().forEach(ctor => objectMetadata.knownTypes.add(ctor));\n    }\n\n    // clear metadata of undefined properties to save memory\n    (Object.keys(metadata) as [keyof JsonMemberMetadata])\n        .forEach((key) => (metadata[key] === undefined) && delete metadata[key]);\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","/**\n * This options cascade through the annotations. Options set\n * in the more specific place override the previous option.\n * Ex. @jsonMember overrides TypedJson options.\n */\nexport interface OptionsBase {\n    /**\n     * Whether to preserve null in the JSON output. When false it\n     * will not emit nor store the property if its value is null.\n     * Default: false.\n     */\n    preserveNull?: boolean;\n}\n\nconst kAllOptions: (keyof OptionsBase)[] = [\n    'preserveNull',\n];\n\nexport function extractOptionBase(from: {[key: string]: any} & OptionsBase): OptionsBase|undefined {\n    const options = Object.keys(from)\n        .filter(key => (kAllOptions as string[]).indexOf(key) > -1)\n        .reduce((obj, key) => {\n            obj[key] = from[key];\n            return obj;\n        }, {} as any);\n    return Object.keys(options).length > 0 ? options : undefined;\n}\n\nexport function getDefaultOptionOf<K extends keyof OptionsBase>(key: K): Required<OptionsBase>[K] {\n    switch (key) {\n        case \"preserveNull\":\n            return false;\n    }\n    // never reached\n    return null as any;\n}\n\nexport function getOptionValue<K extends keyof OptionsBase>(\n    key: K,\n    options?: OptionsBase,\n): Required<OptionsBase>[K] {\n    if (options && options[key] != null) return options[key]!;\n    return getDefaultOptionOf(key);\n}\n\nexport function mergeOptions(\n    existing?: OptionsBase,\n    moreSpecific?: OptionsBase,\n): OptionsBase|undefined {\n    return !moreSpecific\n        ? existing\n        : Object.assign(\n            {},\n            existing,\n            moreSpecific,\n        );\n}\n","export abstract class TypeDescriptor {\n    protected constructor(public readonly ctor: Function) {}\n\n    getTypes(): Function[] {\n        return [this.ctor];\n    }\n}\n\nexport type Typelike = TypeDescriptor|Function;\n\nexport class ConcreteTypeDescriptor extends TypeDescriptor {\n    constructor(ctor: Function) {\n        super(ctor);\n    }\n}\n\nexport abstract class GenericTypeDescriptor extends TypeDescriptor {\n    protected constructor(ctor: Function) {\n        super(ctor);\n    }\n}\n\nexport class ArrayTypeDescriptor extends GenericTypeDescriptor {\n    constructor(public readonly elementType: TypeDescriptor) {\n        super(Array);\n    }\n\n    getTypes(): Function[] {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\n\nexport function ArrayT(elementType: Typelike): ArrayTypeDescriptor {\n    return new ArrayTypeDescriptor(ensureTypeDescriptor(elementType));\n}\n\nexport class SetTypeDescriptor extends GenericTypeDescriptor {\n    constructor(public readonly elementType: TypeDescriptor) {\n        super(Set);\n    }\n\n    getTypes(): Function[] {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\n\nexport function SetT(elementType: Typelike): SetTypeDescriptor {\n    return new SetTypeDescriptor(ensureTypeDescriptor(elementType));\n}\n\nexport const enum MapShape {\n    /**\n     * A map will be serialized as an array of {key: ..., value: ...} objects.\n     */\n    ARRAY,\n\n    /**\n     * A map will be serialized as a JSON object.\n     */\n    OBJECT,\n}\n\nexport interface MapOptions {\n    /**\n     * How the map should be serialized. Default is ARRAY.\n     */\n    shape: MapShape;\n}\n\nexport class MapTypeDescriptor extends GenericTypeDescriptor {\n    constructor(\n        public readonly keyType: TypeDescriptor,\n        public readonly valueType: TypeDescriptor,\n        public readonly options?: Partial<MapOptions>,\n    ) {\n        super(Map);\n    }\n\n    getTypes(): Function[] {\n        return super.getTypes().concat(this.keyType.getTypes(), this.valueType.getTypes());\n    }\n\n    getCompleteOptions(): MapOptions {\n        return {\n            shape: this.options?.shape ? this.options.shape : MapShape.ARRAY,\n        };\n    }\n}\n\nexport function MapT(keyType: Typelike, valueType: Typelike, options?: Partial<MapOptions>): MapTypeDescriptor {\n    return new MapTypeDescriptor(ensureTypeDescriptor(keyType), ensureTypeDescriptor(valueType), options);\n}\n\n// TODO support for dictionary types ie. maps that are plain objects\n// export class DictionaryTypeDescriptor extends GenericTypeDescriptor {\n//     constructor(public readonly elementType: TypeDescriptor) {\n//         super(Object);\n//     }\n//\n//     getTypes(): Function[] {\n//         return super.getTypes().concat(this.elementType.getTypes());\n//     }\n// }\n//\n// export function DictT(elementType: Typelike): DictionaryTypeDescriptor {\n//     return new DictionaryTypeDescriptor(ensureTypeDescriptor(elementType));\n// }\n\nexport function isTypelike(type: any): type is Typelike {\n    return type && (typeof type === \"function\" || type instanceof TypeDescriptor);\n}\n\nexport function ensureTypeDescriptor(type: Typelike): TypeDescriptor {\n    return type instanceof TypeDescriptor ? type : new ConcreteTypeDescriptor(type);\n}\n","import {\n    identity,\n    isInstanceOf,\n    isValueDefined,\n    logError,\n    nameof,\n} from \"./helpers\";\nimport { IndexedObject, Serializable } from \"./types\";\nimport { JsonObjectMetadata, TypeHintEmitter } from \"./metadata\";\nimport { getOptionValue, mergeOptions, OptionsBase } from \"./options-base\";\nimport {\n    ArrayTypeDescriptor,\n    ConcreteTypeDescriptor,\n    MapShape,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from \"./type-descriptor\";\n\nexport function defaultTypeEmitter(\n    targetObject: IndexedObject,\n    sourceObject: IndexedObject,\n    expectedSourceType: Function,\n    sourceTypeMetadata?: JsonObjectMetadata,\n) {\n    // By default, we put a \"__type\" property on the output object if the actual object is not the\n    // same as the expected one, so that deserialization will know what to deserialize into (given\n    // the required known-types are defined, and the object is a valid subtype of the expected type).\n    if (sourceObject.constructor !== expectedSourceType)\n    {\n        targetObject.__type = sourceTypeMetadata && sourceTypeMetadata.name\n            ? sourceTypeMetadata.name\n            : nameof(sourceObject.constructor);\n    }\n}\n\n/**\n * @param sourceObject The original object that should be serialized.\n * @param typeDescriptor Instance of TypeDescriptor containing information about expected serialization.\n * @param memberName Name of the object being serialized, used for debugging purposes.\n * @param serializer Serializer instance, aiding with recursive serialization.\n * @param memberOptions If converted as a member, the member options.\n */\nexport type SerializerFn<T, TD extends TypeDescriptor, Raw> = (\n    sourceObject: T,\n    typeDescriptor: TD,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n) => Raw;\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class\n * instances, and so on) to an untyped javascript object (also called \"simple javascript object\"),\n * and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the\n * last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    public options?: OptionsBase;\n    private typeHintEmitter: TypeHintEmitter = defaultTypeEmitter;\n    private errorHandler: (error: Error) => void = logError;\n    private serializationStrategy = new Map<Serializable<any>, SerializerFn<any, TypeDescriptor, any>>([\n        // primitives\n        [Date, identity],\n        [Number, identity],\n        [String, identity],\n        [Boolean, identity],\n\n        [ArrayBuffer, convertAsArrayBuffer],\n        [DataView, convertAsDataView],\n\n        [Array, convertAsArray],\n        [Set, convertAsSet],\n        [Map, convertAsMap],\n\n        // typed arrays\n        [Float32Array,  convertAsTypedArray],\n        [Float64Array,  convertAsTypedArray],\n        [Int8Array,  convertAsTypedArray],\n        [Uint8Array,  convertAsTypedArray],\n        [Uint8ClampedArray,  convertAsTypedArray],\n        [Int16Array,  convertAsTypedArray],\n        [Uint16Array,  convertAsTypedArray],\n        [Int32Array,  convertAsTypedArray],\n        [Uint32Array, convertAsTypedArray],\n    ]);\n\n    public setTypeHintEmitter(typeEmitterCallback: TypeHintEmitter)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this.typeHintEmitter = typeEmitterCallback;\n    }\n\n    public getTypeHintEmitter(): TypeHintEmitter\n    {\n        return this.typeHintEmitter;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this.errorHandler = errorHandlerCallback;\n    }\n\n    public getErrorHandler(): (error: Error) => void\n    {\n        return this.errorHandler;\n    }\n\n    public retrievePreserveNull(memberOptions?: OptionsBase): boolean\n    {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(\n        sourceObject: any,\n        typeDescriptor: TypeDescriptor,\n        memberName: string = \"object\",\n        memberOptions?: OptionsBase,\n    ): any {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) return null;\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeDescriptor.ctor))\n        {\n            let expectedName = nameof(typeDescriptor.ctor);\n            let actualName = nameof(sourceObject.constructor);\n\n            this.errorHandler(new TypeError(\n                `Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`),\n            );\n            return;\n        }\n\n        const serializer = this.serializationStrategy.get(typeDescriptor.ctor);\n        if (serializer) {\n            return serializer(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        // if not present in the strategy do property by property serialization\n        if (typeof sourceObject === \"object\")\n        {\n            return convertAsObject(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        this.errorHandler(new TypeError(\n            `Could not serialize '${memberName}': don't know how to serialize this type'.`),\n        );\n    }\n}\n\n/**\n * Performs the conversion of a typed object (usually a class instance) to a simple\n * javascript object for serialization.\n */\nfunction convertAsObject(\n    sourceObject: IndexedObject,\n    typeDescriptor: ConcreteTypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n) {\n    let sourceTypeMetadata: JsonObjectMetadata|undefined;\n    let targetObject: IndexedObject;\n    let typeHintEmitter = serializer.getTypeHintEmitter();\n\n    if (sourceObject.constructor !== typeDescriptor.ctor && sourceObject instanceof typeDescriptor.ctor)\n    {\n        // The source object is not of the expected type, but it is a valid subtype.\n        // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n    }\n    else\n    {\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeDescriptor.ctor);\n    }\n\n    if (sourceTypeMetadata)\n    {\n\n        if (sourceTypeMetadata.beforeSerializationMethodName) {\n            // check for member first\n            if (typeof (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName] === \"function\")\n            {\n                (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n            }\n            // check for static\n            else if (typeof (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName] === \"function\")\n            {\n                (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n            }\n            else\n            {\n                serializer.getErrorHandler()(new TypeError(\n                    `beforeSerialization callback '${nameof(sourceTypeMetadata.classType)}.${sourceTypeMetadata.beforeSerializationMethodName}' is not a method.`\n                ));\n            }\n        }\n\n        const sourceMeta = sourceTypeMetadata;\n        // Strong-typed serialization available.\n        // We'll serialize by members that have been marked with @jsonMember (including array/set/map members),\n        // and perform recursive conversion on each of them. The converted objects are put on the 'targetObject',\n        // which is what will be put into 'JSON.stringify' finally.\n        targetObject = {};\n\n        const classOptions = mergeOptions(serializer.options, sourceMeta.options);\n        if (sourceMeta.typeHintEmitter)\n        {\n            typeHintEmitter = sourceMeta.typeHintEmitter;\n        }\n\n        sourceMeta.dataMembers.forEach((objMemberMetadata) =>\n        {\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n            let serialized;\n            if (objMemberMetadata.serializer) {\n                serialized = objMemberMetadata.serializer(sourceObject[objMemberMetadata.key]);\n            } else if (objMemberMetadata.type) {\n                serialized = serializer.convertSingleValue(\n                    sourceObject[objMemberMetadata.key],\n                    objMemberMetadata.type,\n                    `${nameof(sourceMeta.classType)}.${objMemberMetadata.key}`,\n                    objMemberOptions,\n                );\n            } else {\n                throw new TypeError(\n                    `Could not serialize ${objMemberMetadata.name}, there is`\n                    + ` no constructor nor serialization function to use.`,\n                );\n            }\n\n            if (isValueDefined(serialized)\n                || (serializer.retrievePreserveNull(objMemberOptions) && serialized === null)\n            ) {\n                targetObject[objMemberMetadata.name] = serialized;\n            }\n        });\n    }\n    else\n    {\n        // Untyped serialization, \"as-is\", we'll just pass the object on.\n        // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify\n        // to the original object.\n        targetObject = { ...sourceObject };\n    }\n\n    // Add type-hint.\n    typeHintEmitter(targetObject, sourceObject, typeDescriptor.ctor, sourceTypeMetadata);\n\n    return targetObject;\n}\n\n/**\n * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects\n * (or primitive values) for serialization.\n */\nfunction convertAsArray(\n    sourceObject: any[],\n    typeDescriptor: TypeDescriptor,\n    memberName:string ,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): any[] {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor))\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Array: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.elementType)\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n    }\n\n    // Check the type of each element, individually.\n    // If at least one array element type is incorrect, we return undefined, which results in no\n    // value emitted during serialization. This is so that invalid element types don't unexpectedly\n    // alter the ordering of other, valid elements, and that no unexpected undefined values are in\n    // the emitted array.\n    sourceObject.forEach((element, i) =>\n    {\n        if (!(serializer.retrievePreserveNull(memberOptions) && element === null)\n            && !isInstanceOf(element, typeDescriptor.elementType.ctor)\n        ) {\n            const expectedTypeName = nameof(typeDescriptor.elementType.ctor);\n            const actualTypeName = element && nameof(element.constructor);\n            throw new TypeError(`Could not serialize ${memberName}[${i}]:` +\n                ` expected '${expectedTypeName}', got '${actualTypeName}'.`);\n        }\n    });\n\n    if (memberName)\n    {\n        // Just for debugging purposes.\n        memberName += \"[]\";\n    }\n\n    return sourceObject.map(\n        element => serializer.convertSingleValue(\n            element, typeDescriptor.elementType, memberName, memberOptions\n        ),\n    );\n}\n\n/**\n * Performs the conversion of a set of typed objects (or primitive values) into an array\n * of simple javascript objects.\n * @returns\n */\nfunction convertAsSet(\n    sourceObject: Set<any>,\n    typeDescriptor: TypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): any[] {\n    if (!(typeDescriptor instanceof SetTypeDescriptor))\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Set: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.elementType)\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n    }\n\n    // For debugging and error tracking.\n    if (memberName)\n    {\n        memberName += \"[]\";\n    }\n\n    let resultArray: any[] = [];\n\n    // Convert each element of the set, and put it into an output array.\n    // The output array is the one serialized, as JSON.stringify does not support Set serialization.\n    // (TODO: clarification needed)\n    sourceObject.forEach(element =>\n    {\n        const resultElement = serializer.convertSingleValue(element, typeDescriptor.elementType, memberName, memberOptions);\n\n        // Add to output if the source element was undefined, OR the converted element is defined.\n        // This will add intentionally undefined values to output, but not values that became undefined\n        // DURING serializing (usually because of a type-error).\n        if (!isValueDefined(element) || isValueDefined(resultElement))\n        {\n            resultArray.push(resultElement);\n        }\n    });\n\n    return resultArray;\n}\n\n/**\n * Performs the conversion of a map of typed objects (or primitive values) into an array\n * of simple javascript objects with `key` and `value` properties.\n */\nfunction convertAsMap(\n    sourceObject: Map<any, any>,\n    typeDescriptor: TypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): IndexedObject | { key: any, value: any }[] {\n    if (!(typeDescriptor instanceof MapTypeDescriptor))\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Map: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.valueType)\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n    }\n\n    if (!typeDescriptor.keyType)\n    {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n    }\n\n    if (memberName)\n    {\n        memberName += \"[]\";\n    }\n\n    // const resultArray: Array<{ key: any, value: any }> = [];\n    const resultShape = typeDescriptor.getCompleteOptions().shape;\n    const result = resultShape === MapShape.OBJECT ? ({} as IndexedObject) : [];\n    const preserveNull = serializer.retrievePreserveNull(memberOptions);\n\n    // Convert each *entry* in the map to a simple javascript object with key and value properties.\n    sourceObject.forEach((value, key) =>\n    {\n        let resultKeyValuePairObj = {\n            key: serializer.convertSingleValue(key, typeDescriptor.keyType, memberName, memberOptions),\n            value: serializer.convertSingleValue(value, typeDescriptor.valueType, memberName, memberOptions),\n        };\n\n        // We are not going to emit entries with undefined keys OR undefined values.\n        const keyDefined = isValueDefined(resultKeyValuePairObj.key);\n        const valueDefined = isValueDefined(resultKeyValuePairObj.value)\n            || (resultKeyValuePairObj.value === null && preserveNull);\n        if (keyDefined && valueDefined)\n        {\n            if (resultShape === MapShape.OBJECT) {\n                result[resultKeyValuePairObj.key] = resultKeyValuePairObj.value;\n            } else {\n                result.push(resultKeyValuePairObj);\n            }\n        }\n    });\n\n    return result;\n}\n\n/**\n * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n * This is needed because typed arrays are otherwise serialized as objects, so we'll end up\n * with something like \"{ 0: 0, 1: 1, ... }\".\n */\nfunction convertAsTypedArray(sourceObject: ArrayBufferView)\n{\n    return Array.from(sourceObject as any);\n}\n\n/**\n * Performs the conversion of a raw ArrayBuffer to a string.\n */\nfunction convertAsArrayBuffer(buffer: ArrayBuffer)\n{\n    // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n    return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n}\n\n/**\n * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and\n * returning that string.\n */\nfunction convertAsDataView(dataView: DataView)\n{\n    return convertAsArrayBuffer(dataView.buffer);\n}\n","import { isSubtypeOf, isValueDefined, logError, nameof } from \"./helpers\";\nimport { Constructor, IndexedObject, Serializable } from \"./types\";\nimport { JsonObjectMetadata, TypeResolver } from \"./metadata\";\nimport { getOptionValue, mergeOptions, OptionsBase } from \"./options-base\";\nimport {\n    ArrayTypeDescriptor,\n    ConcreteTypeDescriptor,\n    MapShape,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from \"./type-descriptor\";\n\nexport function defaultTypeResolver(\n    sourceObject: IndexedObject, knownTypes: Map<string, Function>,\n): Function | undefined {\n    if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n}\n\nexport type DeserializerFn<T, TD extends TypeDescriptor, Raw> = (\n    sourceObject: Raw,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<T>,\n    memberOptions?: OptionsBase,\n) => T;\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    public options?: OptionsBase;\n\n    private typeResolver: TypeResolver = defaultTypeResolver;\n    private nameResolver?: (ctor: Function) => string;\n    private errorHandler: (error: Error) => void = logError;\n    private deserializationStrategy = new Map<Serializable<any>, DeserializerFn<any, TypeDescriptor, any>>([\n        // primitives\n        [Number, deserializeDirectly],\n        [String, deserializeDirectly],\n        [Boolean, deserializeDirectly],\n\n        [Date, deserializeDate],\n        [ArrayBuffer, stringToArrayBuffer],\n        [DataView, stringToDataView],\n\n        [Array, convertAsArray],\n        [Set, convertAsSet],\n        [Map, convertAsMap],\n\n        // typed arrays\n        [Float32Array,  convertAsFloatArray],\n        [Float64Array,  convertAsFloatArray],\n        [Uint8Array,  convertAsUintArray],\n        [Uint8ClampedArray,  convertAsUintArray],\n        [Uint16Array,  convertAsUintArray],\n        [Uint32Array, convertAsUintArray],\n    ]);\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this.nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: TypeResolver)\n    {\n        if (typeof typeResolverCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeResolverCallback' is not a function.\");\n        }\n\n        this.typeResolver = typeResolverCallback;\n    }\n\n    public getTypeResolver(): TypeResolver\n    {\n        return this.typeResolver;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this.errorHandler = errorHandlerCallback;\n    }\n\n    public getErrorHandler(): (error: Error) => void\n    {\n        return this.errorHandler;\n    }\n\n    public convertSingleValue(\n        sourceObject: any,\n        typeDescriptor: TypeDescriptor,\n        knownTypes: Map<string, Function>,\n        memberName = \"object\",\n        memberOptions?: OptionsBase,\n    ): any {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null)\n        {\n            return null;\n        }\n        else if (!isValueDefined(sourceObject))\n        {\n            return;\n        }\n\n        const deserializer = this.deserializationStrategy.get(typeDescriptor.ctor);\n        if (deserializer)\n        {\n            return deserializer(sourceObject, typeDescriptor, knownTypes, memberName, this, memberOptions);\n        }\n\n        if (typeof sourceObject === \"object\")\n        {\n            return convertAsObject(sourceObject, typeDescriptor, knownTypes, memberName, this);\n        }\n        this.errorHandler(new TypeError(\n            `Could not deserialize '${memberName}': don't know how to deserialize this type'.`),\n        );\n    }\n\n    public instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    public mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this.nameResolver)\n                {\n                    result.set(this.nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    public createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this.nameResolver)\n            {\n                map.set(this.nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private isExpectedMapShape(source: any, expectedShape: MapShape): boolean {\n        return (expectedShape === MapShape.ARRAY && Array.isArray(source))\n        || (expectedShape === MapShape.OBJECT && typeof source === \"object\");\n    }\n\n    public retrievePreserveNull(memberOptions?: OptionsBase): boolean\n    {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n}\n\nfunction throwTypeMismatchError(\n    targetType: string,\n    expectedSourceType: string,\n    actualSourceType: string,\n    memberName: string,\n): never {\n    throw new TypeError(\n        `Could not deserialize ${memberName} as ${targetType}:`\n        + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n    );\n}\n\nfunction makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName: string)\n{\n    const expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n    const actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n    return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n}\n\nfunction srcTypeNameForDebug(sourceObject: any) {\n    return sourceObject ? nameof(sourceObject.constructor) : 'undefined';\n}\n\nfunction deserializeDirectly<T extends string | number | boolean>(\n    sourceObject: T,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    objectName: string,\n): T {\n    if (sourceObject.constructor !== typeDescriptor.ctor)\n    {\n        throw new TypeError(makeTypeErrorMessage(nameof(typeDescriptor.ctor), sourceObject.constructor, objectName));\n    }\n    return sourceObject;\n}\n\nfunction convertAsObject<T>(\n    sourceObject: IndexedObject,\n    typeDescriptor: ConcreteTypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n): IndexedObject|T|undefined {\n    if (typeof sourceObject !== \"object\" || sourceObject === null)\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(`Cannot deserialize ${memberName}: 'sourceObject' must be a defined object.`)\n        );\n        return undefined;\n    }\n\n    let expectedSelfType = typeDescriptor.ctor;\n    let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n    let knownTypeConstructors = knownTypes;\n    let typeResolver = deserializer.getTypeResolver();\n\n    if (sourceObjectMetadata)\n    {\n        // Merge known types received from \"above\" with known types defined on the current type.\n        knownTypeConstructors = deserializer.mergeKnownTypes(\n            knownTypeConstructors,\n            deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes),\n        );\n        if (sourceObjectMetadata.typeResolver)\n        {\n            typeResolver = sourceObjectMetadata.typeResolver;\n        }\n    }\n\n    // Check if a type-hint is available from the source object.\n    const typeFromTypeHint = typeResolver(sourceObject, knownTypeConstructors);\n\n    if (typeFromTypeHint)\n    {\n        // Check if type hint is a valid subtype of the expected source type.\n        if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n        {\n            // Hell yes.\n            expectedSelfType = typeFromTypeHint;\n            sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n            if (sourceObjectMetadata)\n            {\n                // Also merge new known types from subtype.\n                knownTypeConstructors = deserializer.mergeKnownTypes(\n                    knownTypeConstructors,\n                    deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                );\n            }\n        }\n    }\n\n    if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n    {\n        const sourceMetadata = sourceObjectMetadata;\n        // Strong-typed deserialization available, get to it.\n        // First deserialize properties into a temporary object.\n        const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n        const classOptions = mergeOptions(deserializer.options, sourceMetadata.options);\n\n        // Deserialize by expected properties.\n        sourceMetadata.dataMembers.forEach((objMemberMetadata, propKey) =>\n        {\n            const objMemberValue = sourceObject[propKey];\n            const objMemberDebugName = `${nameof(sourceMetadata.classType)}.${propKey}`;\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n\n            let revivedValue;\n            if (objMemberMetadata.deserializer)\n            {\n                revivedValue = objMemberMetadata.deserializer(objMemberValue);\n            }\n            else if (objMemberMetadata.type)\n            {\n                revivedValue = deserializer.convertSingleValue(\n                    objMemberValue,\n                    objMemberMetadata.type,\n                    knownTypeConstructors,\n                    objMemberDebugName,\n                    objMemberOptions,\n                );\n            }\n            else\n            {\n                throw new TypeError(\n                    `Cannot deserialize ${objMemberDebugName} there is`\n                    + ` no constructor nor deserialization function to use.`,\n                );\n            }\n\n            if (isValueDefined(revivedValue)\n                || (deserializer.retrievePreserveNull(objMemberOptions) && revivedValue === null)\n            ) {\n                sourceObjectWithDeserializedProperties[objMemberMetadata.key] = revivedValue;\n            }\n            else if (objMemberMetadata.isRequired)\n            {\n                deserializer.getErrorHandler()(new TypeError(`Missing required member '${objMemberDebugName}'.`));\n            }\n        });\n\n        // Next, instantiate target object.\n        let targetObject: IndexedObject;\n\n        if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n        {\n            try\n            {\n                targetObject = sourceObjectMetadata.initializerCallback(\n                    sourceObjectWithDeserializedProperties,\n                    sourceObject,\n                );\n\n                // Check the validity of user-defined initializer callback.\n                if (!targetObject)\n                {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberName}:`\n                        + ` 'initializer' function returned undefined/null`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                    );\n                }\n                else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberName}:`\n                        + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected`\n                        + `, and '${nameof(targetObject.constructor)}' is not a subtype of`\n                        + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                    );\n                }\n            }\n            catch (e)\n            {\n                deserializer.getErrorHandler()(e);\n                return undefined;\n            }\n        }\n        else\n        {\n            targetObject = deserializer.instantiateType(expectedSelfType);\n        }\n\n        // Finally, assign deserialized properties to target object.\n        Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n        // Call onDeserialized method (if any).\n        if (sourceObjectMetadata.onDeserializedMethodName)\n        {\n            // check for member first\n            if (typeof (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n            {\n                (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName]();\n            }\n            // check for static\n            else if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n            {\n                (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n            }\n            else\n            {\n                deserializer.getErrorHandler()(new TypeError(\n                    `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                ));\n            }\n        }\n\n        return targetObject;\n    }\n    else\n    {\n        // Untyped deserialization into Object instance.\n        const targetObject = {} as IndexedObject;\n\n        Object.keys(sourceObject).forEach(sourceKey =>\n        {\n            targetObject[sourceKey] = deserializer.convertSingleValue(\n                sourceObject[sourceKey],\n                new ConcreteTypeDescriptor(sourceObject[sourceKey].constructor),\n                knownTypes,\n                sourceKey\n            );\n        });\n\n        return targetObject;\n    }\n}\n\nfunction convertAsArray(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): any[] {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor))\n    {\n        throw new TypeError(`Could not deserialize ${memberName} as Array: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!(Array.isArray(sourceObject)))\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)),\n        );\n        return [];\n    }\n\n    if (!typeDescriptor.elementType)\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`),\n        );\n        return [];\n    }\n\n    return sourceObject.map(element => {\n        // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n        // entries, as an Array is ordered.\n        try\n        {\n            return deserializer.convertSingleValue(\n                element,\n                typeDescriptor.elementType,\n                knownTypes,\n                `${memberName}[]`,\n                memberOptions,\n            );\n        }\n        catch (e)\n        {\n            deserializer.getErrorHandler()(e);\n\n            // Keep filling the array here with undefined to keep original ordering.\n            // Note: this is just aesthetics, not returning anything produces the same result.\n            return undefined;\n        }\n    });\n}\n\nfunction convertAsSet(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): Set<any> {\n    if (!(typeDescriptor instanceof SetTypeDescriptor))\n    {\n        throw new TypeError(`Could not deserialize ${memberName} as Set: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!(Array.isArray(sourceObject)))\n    {\n        deserializer.getErrorHandler()(new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n        return new Set<any>();\n    }\n\n    if (!typeDescriptor.elementType)\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`),\n        );\n        return new Set<any>();\n    }\n\n    const resultSet = new Set<any>();\n\n    sourceObject.forEach((element, i) => {\n        try\n        {\n            resultSet.add(deserializer.convertSingleValue(\n                element,\n                typeDescriptor.elementType,\n                knownTypes,\n                `${memberName}[${i}]`,\n                memberOptions,\n            ));\n        }\n        catch (e)\n        {\n            // Faulty entries are skipped, because a Set is not ordered, and skipping an entry\n            // does not affect others.\n            deserializer.getErrorHandler()(e);\n        }\n    });\n\n    return resultSet;\n}\n\nfunction isExpectedMapShape(source: any, expectedShape: MapShape): boolean {\n    return (expectedShape === MapShape.ARRAY && Array.isArray(source))\n        || (expectedShape === MapShape.OBJECT && typeof source === \"object\");\n}\n\nfunction convertAsMap(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): Map<any, any> {\n    if (!(typeDescriptor instanceof MapTypeDescriptor))\n    {\n        throw new TypeError(`Could not deserialize ${memberName} as Map: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    const expectedShape = typeDescriptor.getCompleteOptions().shape;\n    if (!isExpectedMapShape(sourceObject, expectedShape))\n    {\n        const expectedType = expectedShape === MapShape.ARRAY ? Array : Object;\n        deserializer.getErrorHandler()(\n            new TypeError(makeTypeErrorMessage(expectedType, sourceObject.constructor, memberName)),\n        );\n        return new Map<any, any>();\n    }\n\n    if (!typeDescriptor.keyType)\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`),\n        );\n        return new Map<any, any>();\n    }\n\n    if (!typeDescriptor.valueType)\n    {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`),\n        );\n        return new Map<any, any>();\n    }\n\n    const resultMap = new Map<any, any>();\n\n    if (expectedShape === MapShape.OBJECT)\n    {\n        Object.keys(sourceObject).forEach(key => {\n            try\n            {\n                const resultKey = deserializer.convertSingleValue(\n                    key,\n                    typeDescriptor.keyType,\n                    knownTypes,\n                    memberName,\n                    memberOptions,\n                );\n                if (isValueDefined(resultKey))\n                {\n                    resultMap.set(\n                        resultKey,\n                        deserializer.convertSingleValue(\n                            sourceObject[key],\n                            typeDescriptor.valueType,\n                            knownTypes,\n                            `${memberName}[${resultKey}]`,\n                            memberOptions,\n                        ),\n                    );\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                deserializer.getErrorHandler()(e);\n            }\n        })\n    }\n    else\n    {\n        sourceObject.forEach((element: any) => {\n            try\n            {\n                const key = deserializer.convertSingleValue(\n                    element.key,\n                    typeDescriptor.keyType,\n                    knownTypes,\n                    memberName,\n                    memberOptions,\n                );\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(\n                        key,\n                        deserializer.convertSingleValue(\n                            element.value,\n                            typeDescriptor.valueType,\n                            knownTypes,\n                            `${memberName}[${key}]`,\n                            memberOptions,\n                        ),\n                    );\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                deserializer.getErrorHandler()(e);\n            }\n        });\n    }\n\n    return resultMap;\n}\n\nfunction deserializeDate(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): Date {\n    // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n    // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n    if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n    {\n        return new Date(sourceObject as any);\n    }\n    else if (sourceObject instanceof Date)\n    {\n        return sourceObject\n    }\n    else\n    {\n        throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug(sourceObject), memberName);\n    }\n}\n\nfunction stringToArrayBuffer(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n) {\n    if (typeof sourceObject !== \"string\")\n    {\n        throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return createArrayBufferFromString(sourceObject);\n}\n\nfunction stringToDataView(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n) {\n    if (typeof sourceObject !== \"string\")\n    {\n        throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return new DataView(createArrayBufferFromString(sourceObject));\n}\n\nfunction createArrayBufferFromString(input: string): ArrayBuffer {\n    let buf = new ArrayBuffer(input.length * 2); // 2 bytes for each char\n    let bufView = new Uint16Array(buf);\n\n    for (let i = 0, strLen = input.length; i < strLen; i++)\n    {\n        bufView[i] = input.charCodeAt(i);\n    }\n\n    return buf;\n}\n\nfunction convertAsFloatArray<T extends Float32Array | Float64Array>(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): T {\n    const constructor = typeDescriptor.ctor as Constructor<T>;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem)))\n    {\n        return new constructor(sourceObject);\n    }\n    return throwTypeMismatchError(\n        constructor.name,\n        \"a numeric source array\",\n        srcTypeNameForDebug(sourceObject),\n        memberName,\n    );\n}\n\nfunction convertAsUintArray<T extends Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array>(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): T {\n    const constructor = typeDescriptor.ctor as Constructor<T>;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem)))\n    {\n        return new constructor(sourceObject.map(value => ~~value));\n    }\n    return throwTypeMismatchError(\n        typeDescriptor.ctor.name,\n        \"a numeric source array\",\n        srcTypeNameForDebug(sourceObject),\n        memberName,\n    );\n}\n","import { nameof, logError, isReflectMetadataSupported, MISSING_REFLECT_CONF_MSG } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\nimport {\n    ArrayTypeDescriptor,\n    ensureTypeDescriptor,\n    isTypelike,\n    TypeDescriptor,\n} from \"./type-descriptor\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions extends OptionsBase\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function|TypeDescriptor, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        const decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(elementConstructor))\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: createArrayType(ensureTypeDescriptor(elementConstructor), dimensions),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nexport function createArrayType(elementType: TypeDescriptor, dimensions: number): ArrayTypeDescriptor {\n    let type = new ArrayTypeDescriptor(elementType);\n    for (let i = 1; i < dimensions; ++i) {\n        type = new ArrayTypeDescriptor(type);\n    }\n    return type;\n}\n","import { Constructor, IndexedObject, Serializable } from \"./typedjson/types\";\nimport { Serializer, defaultTypeEmitter } from \"./typedjson/serializer\";\nimport { Deserializer, defaultTypeResolver } from \"./typedjson/deserializer\";\nimport { JsonObjectMetadata, TypeResolver, TypeHintEmitter } from \"./typedjson/metadata\";\nimport { logError, logWarning, nameof, parseToJSObject } from \"./typedjson/helpers\";\nimport { extractOptionBase, OptionsBase } from \"./typedjson/options-base\";\nimport { createArrayType } from \"./typedjson/json-array-member\";\nimport { ensureTypeDescriptor, MapT, SetT } from './typedjson/type-descriptor';\n\nexport type JsonTypes = Object | boolean | string | number | null | undefined;\nexport { defaultTypeResolver, defaultTypeEmitter };\n\nexport interface ITypedJSONSettings extends OptionsBase\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: TypeResolver;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?: TypeHintEmitter;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Serializable<K>,\n        valueType: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Serializable<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Serializable<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Serializable<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Serializable<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Serializable<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Serializable<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Serializable<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): Object[]|undefined {\n        return new TypedJSON(elementType, settings).toPlainSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Serializable<K>,\n        valueCtor: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): IndexedObject|{ key: any, value: any }[]|undefined {\n        return new TypedJSON(valueCtor, settings).toPlainMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Serializable<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Serializable<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Serializable<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Serializable<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Serializable<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Serializable<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Serializable<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Serializable<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Serializable<K>,\n        valueCtor: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Serializable<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootConstructor The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Serializable<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation))\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        const options = extractOptionBase(settings);\n        this.serializer.options = options;\n        this.deserializer.options = options;\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const json = parseToJSObject(object, this.rootConstructor);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(\n                json,\n                ensureTypeDescriptor(this.rootConstructor),\n                knownTypes,\n            ) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const json = parseToJSObject(object, Array);\n        return this.deserializer.convertSingleValue(json,\n            createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions),\n            this._mapKnownTypes(this.globalKnownTypes),\n        );\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const json = parseToJSObject(object, Set);\n        return this.deserializer.convertSingleValue(json,\n            SetT(this.rootConstructor),\n            this._mapKnownTypes(this.globalKnownTypes)\n        );\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Serializable<K>): Map<K, T>\n    {\n        const json = parseToJSObject(object, Map);\n        return this.deserializer.convertSingleValue(\n            json,\n            MapT(keyConstructor, this.rootConstructor),\n            this._mapKnownTypes(this.globalKnownTypes),\n        );\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): JsonTypes\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(\n                object,\n                ensureTypeDescriptor(this.rootConstructor),\n            );\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(\n                object, createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions));\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(object, SetT(this.rootConstructor));\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(\n        object: Map<K, T>, keyConstructor: Serializable<K>,\n    ): IndexedObject | { key: any, value: any }[] | undefined {\n        try\n        {\n            return this.serializer.convertSingleValue(object, MapT(keyConstructor, this.rootConstructor));\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Serializable<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n","import { Serializable } from \"./types\";\nimport { JsonObjectMetadata, TypeHintEmitter, TypeResolver } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\n\nexport type InitializerCallback<T> = (sourceObject: T, rawSourceObject: T) => T;\n\nexport interface IJsonObjectOptionsBase extends OptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints.\n     */\n    knownTypes?: Function[];\n\n    /**\n     * A function that will emit a type hint on the resulting JSON. It will override the global typeEmitter.\n     */\n    typeHintEmitter?: TypeHintEmitter;\n\n    /**\n     * A function that given a source object will resolve the type that should be instantiated.\n     * It will override the global type resolver.\n     */\n    typeResolver?: TypeResolver;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name of a static or instance method to call before the serialization\n     * of the typed object is started.\n     */\n    beforeSerialization?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer: InitializerCallback<T>;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer?: InitializerCallback<T>;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional\n * settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Serializable<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: Serializable<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: Serializable<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Serializable<T>\n): ((target: Serializable<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Serializable<T>\n    ): void {\n        // Create or obtain JsonObjectMetadata object.\n        let objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(target.prototype);\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        objectMetadata.beforeSerializationMethodName = options.beforeSerialization;\n\n        if (options.typeResolver)\n        {\n            objectMetadata.typeResolver = options.typeResolver;\n        }\n        if (options.typeHintEmitter)\n        {\n            objectMetadata.typeHintEmitter = options.typeHintEmitter;\n        }\n\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n        const optionsBase = extractOptionBase(options);\n        if (optionsBase)\n        {\n            objectMetadata.options = optionsBase;\n        }\n\n        if (options.knownTypes)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n\nfunction isSubClass<T>(target: Serializable<T>) {\n    return\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf, MISSING_REFLECT_CONF_MSG,\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\nimport {\n    ArrayTypeDescriptor,\n    ensureTypeDescriptor,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from \"./type-descriptor\";\nimport { IndexedObject } from './types';\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions extends OptionsBase\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function|TypeDescriptor;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly\n * declared.\n * @param options Additional options.\n */\nexport function jsonMember(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember<T extends Function>(prototype: IndexedObject, propertyKey: string | symbol): void;\n\nexport function jsonMember<T extends Function>(\n    optionsOrPrototype?: IJsonMemberOptions | IndexedObject,\n    propKey?: string | symbol,\n): PropertyDecorator | void {\n    if (propKey && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const prototype = optionsOrPrototype as IndexedObject;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", prototype, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime. ${MISSING_REFLECT_CONF_MSG}`);\n                return;\n            }\n\n            const typeDescriptor = ensureTypeDescriptor(reflectPropCtor);\n            if (isSpecialPropertyType(decoratorName, typeDescriptor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(prototype, propKey, {\n                type: typeDescriptor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrPrototype as IJsonMemberOptions || {};\n            let typeDescriptor: TypeDescriptor|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                typeDescriptor = ensureTypeDescriptor(options.constructor);\n                if (isReflectMetadataSupported && !isSubtypeOf(typeDescriptor.ctor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    const reflectCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!reflectCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                    typeDescriptor = ensureTypeDescriptor(reflectCtor);\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n\n            if (typeDescriptor && isSpecialPropertyType(decoratorName, typeDescriptor))\n            {\n                return;\n            }\n            injectMetadataInformation(target, _propKey, {\n                type: typeDescriptor,\n                emitDefaultValue: options.emitDefaultValue,\n                isRequired: options.isRequired,\n                options: extractOptionBase(options),\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, typeDescriptor: TypeDescriptor)\n{\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor) && typeDescriptor.ctor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (!(typeDescriptor instanceof SetTypeDescriptor) && typeDescriptor.ctor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (!(typeDescriptor instanceof MapTypeDescriptor) && typeDescriptor.ctor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\nimport { isTypelike, SetT } from \"./type-descriptor\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions extends OptionsBase\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        const decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(elementConstructor))\n        {\n            logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            logError(`${decoratorName}: property is not a Set. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: SetT(elementConstructor),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported, MISSING_REFLECT_CONF_MSG } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\nimport { extractOptionBase, OptionsBase } from \"./options-base\";\nimport { isTypelike, MapOptions, MapT, TypeDescriptor } from \"./type-descriptor\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions extends OptionsBase, Partial<MapOptions>\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(\n    keyConstructor: Function|TypeDescriptor,\n    valueConstructor: Function|TypeDescriptor,\n    options: IJsonMapMemberOptions = {},\n) {\n    return (target: Object, propKey: string | symbol) =>\n    {\n        const decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(keyConstructor))\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (!isTypelike(valueConstructor))\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: MapT(keyConstructor, valueConstructor, {shape: options.shape}),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { TypedJSON } from \"../parser\";\n\n/**\n * Options for the @toJson decorator.\n */\nexport interface IToJsonOptions {\n    /**\n     * When set to true it will overwrite any toJSON already existing on the prototype.\n     */\n    overwrite?: boolean;\n}\n\n/**\n * Decorator that will generate toJSON function on the class prototype that allows\n * JSON.stringify to be used instead of TypedJSON.stringify. Under the hood it will\n * simply delegate to TypedJSON.\n * By default it will throw if the prototype already has a toJSON function defined.\n * @param target the class which prototype should be modified.\n */\nexport function toJson<T extends Object>(target: Function): void;\n/**\n * Decorator factory that accepts the options interface.\n * @param options for configuring the toJSON creation.\n */\nexport function toJson<T extends Object>(options: IToJsonOptions): ((target: Function) => void);\nexport function toJson<T extends Object>(optionsOrTarget: IToJsonOptions | Function\n): ((target: Function) => void) | void {\n    if (typeof optionsOrTarget === 'function') {\n        // used directly\n        toJsonDecorator(optionsOrTarget, {});\n        return;\n    }\n    // used as a factory\n    return (target: Function) => {\n        toJsonDecorator(target, optionsOrTarget);\n    }\n}\n\nfunction toJsonDecorator<T extends Object>(target: Function, options: IToJsonOptions): void {\n    if (!options.overwrite && target.prototype.toJSON) {\n        throw new Error(`${target.name} already has toJSON defined!`);\n    }\n    target.prototype.toJSON = function () {\n        return TypedJSON.toPlainJson(this, Object.getPrototypeOf(this).constructor);\n    }\n}\n","export { TypedJSON, ITypedJSONSettings, JsonTypes, defaultTypeResolver, defaultTypeEmitter } from \"./parser\";\nexport { TypeResolver, TypeHintEmitter, JsonObjectMetadata } from \"./typedjson/metadata\";\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\nexport { toJson } from \"./typedjson/to-json\";\nexport { ArrayT, SetT, MapT } from \"./typedjson/type-descriptor\";\n"],"sourceRoot":""}